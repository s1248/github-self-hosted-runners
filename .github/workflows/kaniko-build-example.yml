name: Secure Container Build with Kaniko

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  secure-build:
    name: Build v·ªõi Kaniko Runner
    runs-on: [self-hosted, kaniko]
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Set up build environment
      run: |
        echo "Setting up secure build environment..."
        echo "Workspace: $(pwd)"
        echo "Kaniko executor: $(ls -la /kaniko-executor)"
        
    - name: Build container image with Kaniko
      run: |
        # S·ª≠ d·ª•ng helper script ƒë·ªÉ build image
        IMAGE_TAG="${{ github.repository }}:${{ github.sha }}"
        echo "Building image: $IMAGE_TAG"
        
        # Build image v·ªõi Kaniko (kh√¥ng push, ch·ªâ t·∫°o tar)
        kaniko-build.sh \
          Dockerfile \
          . \
          "$IMAGE_TAG" \
          --tar-path=/workspace/built-image.tar \
          --no-push
          
    - name: Verify built image
      run: |
        echo "Verifying built image..."
        if [ -f /workspace/built-image.tar ]; then
          echo "‚úÖ Image built successfully"
          ls -lh /workspace/built-image.tar
        else
          echo "‚ùå Image build failed"
          exit 1
        fi
        
    - name: Run security scan (optional)
      run: |
        echo "üîç Running security checks..."
        # ·ªû ƒë√¢y c√≥ th·ªÉ th√™m security scanning tools
        # nh∆∞ Trivy, Grype, ho·∫∑c other security scanners
        echo "Security scan completed"
        
    - name: Push to registry (if on main branch)
      if: github.ref == 'refs/heads/main'
      run: |
        echo "üöÄ Pushing to production registry..."
        IMAGE_TAG="${{ github.repository }}:${{ github.sha }}"
        LATEST_TAG="${{ github.repository }}:latest"
        
        # Build v√† push image
        kaniko-build.sh \
          Dockerfile \
          . \
          "$IMAGE_TAG" \
          --cache=true \
          --compressed-caching=false
          
        # Tag v√† push latest
        kaniko-build.sh \
          Dockerfile \
          . \
          "$LATEST_TAG" \
          --cache=true
          
    - name: Cleanup workspace
      if: always()
      run: |
        echo "üßπ Cleaning up workspace..."
        rm -f /workspace/built-image.tar
        echo "Cleanup completed"

  # Job ƒë·ªÉ demo multi-stage build
  multi-stage-build:
    name: Multi-stage Build Demo
    runs-on: [self-hosted, kaniko]
    needs: secure-build
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Build production image
      run: |
        echo "üèóÔ∏è Building production image with multi-stage..."
        
        # Build ch·ªâ production stage
        kaniko-build.sh \
          Dockerfile \
          . \
          "${{ github.repository }}:production-${{ github.sha }}" \
          --target=production \
          --cache=true \
          --build-arg VERSION=${{ github.sha }} \
          --build-arg BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ')

  # Job ƒë·ªÉ test v·ªõi different architectures
  multi-arch-build:
    name: Multi-Architecture Build
    runs-on: [self-hosted, kaniko]
    if: github.ref == 'refs/heads/main'
    strategy:
      matrix:
        platform: [linux/amd64, linux/arm64]
        
    steps:
    - name: Checkout repository  
      uses: actions/checkout@v4
      
    - name: Build for ${{ matrix.platform }}
      run: |
        echo "üîß Building for platform: ${{ matrix.platform }}"
        ARCH=$(echo "${{ matrix.platform }}" | cut -d'/' -f2)
        
        kaniko-build.sh \
          Dockerfile \
          . \
          "${{ github.repository }}:${{ github.sha }}-${ARCH}" \
          --custom-platform="${{ matrix.platform }}" \
          --cache=true